{"version":3,"sources":["components/Navbar/Navbar.module.scss","components/PasswordRecovery/Password-recovery.module.scss","components/Registration/Registration.module.scss","components/EnterNewPassword/Enter-new-password.module.scss","common/InputContainer/InputContainer.module.scss","common/HeaderEnterApp/HeaderEnterApp.module.scss","common/MainActionButton/MainActionButton.module.scss","common/Preloader/Preloader.module.scss","components/Error404/Error404.module.scss","components/TestComponents/Test-components.tsx","api/api.ts","components/Login/login-reducer.ts","common/InputContainer/InputContainer.tsx","common/validation/EmailValidation.ts","common/HeaderEnterApp/HeaderEnterApp.tsx","media/loadings/loadingBtn.svg","common/Preloader/Preloader.tsx","common/MainActionButton/MainActionButton.tsx","common/validation/passwordValidation.ts","components/Login/Login.tsx","components/Profile/Profile.tsx","components/Error404/Error404.tsx","components/EnterNewPassword/enter-new-password-reducer.ts","components/EnterNewPassword/Enter-new-password.tsx","components/PasswordRecovery/password-recovery-reducer.ts","components/PasswordRecovery/Password-recovery.tsx","components/Registration/registration-reducer.ts","components/Registration/Registration.tsx","components/Navbar/Navbar.tsx","media/password/checkEmail.svg","components/PasswordRecovery/ChekEmail.tsx","App.tsx","reportWebVitals.ts","components/Profile/profile-reducer.ts","state/redux-store.ts","index.tsx","components/Login/Login.module.scss"],"names":["module","exports","TestComponents","instance","axios","create","withCredentials","baseURL","loginAPI","email","password","rememberMe","post","PasswordRecoveryAPI","from","message","registrationAPI","SetNewPasswordAPI","resetPasswordToken","initialStateLogin","_id","name","avatar","publicCardPacksCount","created","updated","isAdmin","verified","error","loadingRequest","logIn","type","payload","setServerErrorMessageLogin","InputContainer","props","useState","showPassword","setShowPassword","className","s","emailPasswordContainer","inputTitle","title","typeInput","value","onChange","changeValue","placeholder","onBlur","alt","src","passwordControl","onClick","errorEmailPasswordMessage","errorMessage","emailValidation","test","HeaderEnterApp","logo","Preloader","st","PreloaderContainer","loadingProgress","MainActionButton","blueBtn","actionClick","disabled","loadingStatus","disabledBtnSubmit","PasswordValidation","Login","emailValue","setEmailValue","passwordValue","setPasswordValue","dispatch","useDispatch","useSelector","state","login","isLogIn","serverErrorMessage","errorEmailMessage","setErrorEmailMessage","errorPasswordMessage","setErrorPasswordMessage","useEffect","to","authPageContainer","emailPasswordLoginContainer","e","currentTarget","forgotPasswordBtn","btnFooterLoginContainer","errorMessageContainer","blueBtnContainer","a","response","userData","data","loginUserTC","DifferentAccountBtn","footerBtn","Profile","Error404","styles","pageNotFound","initialStateSetNewPassword","success","setServerErrorMessage","setLoading","setSuccess","EnterNewPassword","setPassword","setError","token","useParams","newPassword","successResponse","containerNewPassword","event","textAction","positionActionBtn","setNewPasswordThunk","initialStatePasswordRecovery","setLoadingRequest","setServerErrorMessageRecovery","PasswordRecovery","setEmail","forgotPasswordContainer","passwordRecoveryThunk","initialStateRegistration","isRegistration","setRegistrationAC","setServerErrorMessageRegistration","Registration","checkPassword","setCheckPassword","registration","registrationContainer","inputFields","positionBtnsAndError","btns","btnCancel","window","history","go","setRegistration","Navbar","nav","item","activeClassName","activeLink","active","CheckEmail","containerCheckEmail","headerCheckEmail","imageCheckEmail","checkEmail","titleCheckEmail","textActionCheckEmail","App","path","render","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateProfile","rootReducer","combineReducers","action","profile","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b22259a5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2CX9O\",\"item\":\"Navbar_item__2zQi5\",\"activeLink\":\"Navbar_activeLink__1Bxt4\",\"tab_friend\":\"Navbar_tab_friend__27LqJ\",\"title_friend\":\"Navbar_title_friend__3OjK9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"forgotPasswordContainer\":\"Password-recovery_forgotPasswordContainer__3omsd\",\"textAction\":\"Password-recovery_textAction__16riM\",\"containerCheckEmail\":\"Password-recovery_containerCheckEmail__27L5f\",\"headerCheckEmail\":\"Password-recovery_headerCheckEmail__3QK2L\",\"imageCheckEmail\":\"Password-recovery_imageCheckEmail__2JW-T\",\"titleCheckEmail\":\"Password-recovery_titleCheckEmail__E8ERz\",\"textActionCheckEmail\":\"Password-recovery_textActionCheckEmail__IjcGh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"registrationContainer\":\"Registration_registrationContainer__22P9A\",\"inputFields\":\"Registration_inputFields__r6PLc\",\"passwordControl\":\"Registration_passwordControl__3V_PH\",\"btns\":\"Registration_btns__jj98Q\",\"positionBtnsAndError\":\"Registration_positionBtnsAndError__1aDXW\",\"errorMessageContainer\":\"Registration_errorMessageContainer__3RQPU\",\"blueBtnContainer\":\"Registration_blueBtnContainer__1Vsi2\",\"btnCancel\":\"Registration_btnCancel__33mpi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerNewPassword\":\"Enter-new-password_containerNewPassword__-Ha4c\",\"textAction\":\"Enter-new-password_textAction__1JDLo\",\"blueBtnContainer\":\"Enter-new-password_blueBtnContainer__2okyi\",\"errorMessageContainer\":\"Enter-new-password_errorMessageContainer__3L6oo\",\"positionActionBtn\":\"Enter-new-password_positionActionBtn__3cMFk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"emailPasswordContainer\":\"InputContainer_emailPasswordContainer__1NGD3\",\"inputTitle\":\"InputContainer_inputTitle__24ASi\",\"errorEmailPasswordMessage\":\"InputContainer_errorEmailPasswordMessage__37zZI\",\"passwordControl\":\"InputContainer_passwordControl__1eMt-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"HeaderEnterApp_logo__DJhL3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"blueBtn\":\"MainActionButton_blueBtn__Lq9CM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"PreloaderContainer\":\"Preloader_PreloaderContainer__2cnFa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageNotFound\":\"Error404_pageNotFound__32pjE\"};","import React from \"react\";\r\n\r\nexport const TestComponents = () => {\r\n    return (\r\n        <div>\r\n        </div>\r\n    )\r\n}","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/'\r\n})\r\n\r\n\r\n//API\r\nexport const loginAPI = {\r\n    logIn(email: string, password: string, rememberMe: boolean = false) {\r\n        return instance.post<loginResponseType>('auth/login', {email, password, rememberMe})\r\n    }\r\n}\r\nexport const PasswordRecoveryAPI = {\r\n    forgot(email: string) {\r\n        return instance.post<PasswordRecoveryDataType>('/auth/forgot', {\r\n            email,\r\n            from: \"test-front-admin <ai73a@yandex.by>\",\r\n            message: `<div style=\"background-color: lime; padding: 15px\">password recovery link: \r\n                        <a href='https://IvanStupchyk.github.io/learning-cards#/new-password/$token$'>link</a></div>`\r\n        })\r\n    }\r\n}\r\nexport const registrationAPI = {\r\n    register(email: string, password: string) {\r\n        return instance.post<registrationResponseType>('auth/register', {email, password})\r\n    }\r\n}\r\n\r\nexport const SetNewPasswordAPI = {\r\n    setNewPassword (password: string, resetPasswordToken: string)  {\r\n        return instance.post<SetNewPasswordDataType>(\"/auth/set-new-password\", {\r\n            password,\r\n            resetPasswordToken,\r\n        })\r\n    },\r\n}\r\n\r\n\r\n//TYPES=====\r\n\r\n//loginAPI\r\nexport type loginResponseType = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar?: string\r\n    publicCardPacksCount: number\r\n    created: Date\r\n    updated: Date\r\n    isAdmin: boolean\r\n    verified: boolean\r\n    rememberMe: boolean\r\n    error?: string\r\n}\r\n\r\n//PasswordRecoveryAPI\r\nexport type PasswordRecoveryDataType = {\r\n    error: string;\r\n}\r\n\r\n//SetNewPasswordAPI\r\nexport type SetNewPasswordDataType = {\r\n    info: string\r\n    error: string\r\n}\r\n\r\n//registrationAPI\r\ntype registrationResponseType = {\r\n    addedUser: addedUserType\r\n    error?: string\r\n}\r\ntype addedUserType = {\r\n    _id: string,\r\n    email: string,\r\n    rememberMe: boolean,\r\n    isAdmin: boolean,\r\n    name: string,\r\n    verified: boolean,\r\n    publicCardPacksCount: 0,\r\n    created: string,\r\n    updated: string,\r\n    __v: number\r\n}","import {loginAPI, loginResponseType} from \"../../api/api\";\r\nimport {AppThunkType} from \"../../state/redux-store\";\r\n\r\nconst initialStateLogin: initialLoginType = {\r\n    _id: '',\r\n    email: '',\r\n    name: '',\r\n    avatar: '',\r\n    publicCardPacksCount: null,\r\n    created: null,\r\n    updated: null,\r\n    isAdmin: false,\r\n    verified: false,\r\n    rememberMe: false,\r\n    error: '',\r\n    loadingRequest: false,\r\n    logIn: false\r\n}\r\n\r\nexport const loginReducer = (state: initialLoginType = initialStateLogin, action: actionsLoginType): initialLoginType => {\r\n    switch (action.type) {\r\n        case 'LOGIN/LOGIN-USER':\r\n            return {...state, ...action.payload}\r\n        case 'LOGIN/SET-ERROR':\r\n            return {...state, ...action.payload}\r\n        case 'LOGIN/LOADING-REQUEST':\r\n            return {...state, ...action.payload}\r\n        case 'LOGIN/LOG-IN':\r\n            return {...state, ...action.payload}\r\n        default: return state\r\n    }\r\n}\r\n\r\n//actionC\r\nconst loginUser = (userData: loginResponseType) => {\r\n    return {\r\n        type: 'LOGIN/LOGIN-USER',\r\n        payload: {...userData}\r\n    } as const\r\n}\r\nconst loadingRequest = (loadingRequest: boolean) => {\r\n    return {\r\n        type: 'LOGIN/LOADING-REQUEST',\r\n        payload: {loadingRequest}\r\n    } as const\r\n}\r\nexport const logIn = (logIn: boolean) => {\r\n    return {\r\n        type: 'LOGIN/LOG-IN',\r\n        payload: {logIn}\r\n    } as const\r\n}\r\nexport const setServerErrorMessageLogin = (error: string) => {\r\n    return {\r\n        type: 'LOGIN/SET-ERROR',\r\n        payload: {error}\r\n    } as const\r\n}\r\n\r\n//thunkC\r\nexport const loginUserTC = (emailValue: string, passwordValue: string): AppThunkType => async (dispatch) => {\r\n    dispatch(loadingRequest(true))\r\n\r\n    try {\r\n        const response = await loginAPI.logIn(emailValue, passwordValue)\r\n        dispatch(loginUser(response.data))\r\n        dispatch(logIn(true))\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        dispatch(setServerErrorMessageLogin(error))\r\n    } finally {\r\n        dispatch(loadingRequest(false))\r\n    }\r\n}\r\n\r\n//types\r\nexport type initialLoginType = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar: string\r\n    publicCardPacksCount: number | null\r\n    created: Date | null\r\n    updated: Date | null\r\n    isAdmin: boolean\r\n    verified: boolean\r\n    rememberMe: boolean\r\n    error: string\r\n    loadingRequest: boolean\r\n    logIn: boolean\r\n}\r\nexport type actionsLoginType = ReturnType<typeof loginUser>\r\n    | ReturnType<typeof loadingRequest>\r\n    | ReturnType<typeof logIn>\r\n    | ReturnType<typeof setServerErrorMessageLogin>","import s from \"./InputContainer.module.scss\";\r\nimport React, {ChangeEvent, FocusEvent, useState} from \"react\";\r\n\r\ntype InputContainerPropsType = {\r\n    title?: string\r\n    value: string\r\n    changeValue: (e: ChangeEvent<HTMLInputElement>) => void,\r\n    errorMessage: string\r\n    typeInput: 'email' | 'password' | 'text'\r\n    placeholder?: string\r\n    onBlur?: (e: FocusEvent<HTMLInputElement>) => void\r\n}\r\nexport const InputContainer = (props: InputContainerPropsType) => {\r\n    const [showPassword, setShowPassword] = useState<boolean>(false)\r\n    const typeShowInput = () => {\r\n        if (props.typeInput === 'email') {\r\n            return props.typeInput\r\n        } else if (props.typeInput === 'password') {\r\n            return showPassword ? 'text' : 'password'\r\n        }\r\n    }\r\n\r\n    return (\r\n        <label className={s.emailPasswordContainer}>\r\n            <span className={s.inputTitle}>{props.title}</span>\r\n            <input\r\n                type={typeShowInput()}\r\n                value={props.value}\r\n                onChange={props.changeValue}\r\n                placeholder={props.placeholder}\r\n                onBlur={props.onBlur}\r\n            />\r\n            {props.typeInput === 'password'\r\n            &&\r\n            <img alt={'your password'}\r\n                 src={showPassword ? 'https://snipp.ru/demo/495/no-view.svg' : 'https://snipp.ru/demo/495/view.svg'}\r\n                 className={s.passwordControl} onClick={() => {setShowPassword(!showPassword)}}/>\r\n            }\r\n            <span className={s.errorEmailPasswordMessage}>{props.errorMessage}</span>\r\n        </label>\r\n    )\r\n}","export const emailValidation = (value: string) => {\r\n    return /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)\r\n}","import s from \"./HeaderEnterApp.module.scss\";\r\nimport React from \"react\";\r\n\r\ntype HeaderEnterAppType = {\r\n    title?: string\r\n}\r\nexport const HeaderEnterApp = ({title}: HeaderEnterAppType) => {\r\n    return (\r\n        <div>\r\n            <div className={s.logo}>It-incubator</div>\r\n            <h1>{title}</h1>\r\n        </div>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/loadingBtn.95ae2c78.svg\";","import React from \"react\";\r\nimport loadingProgress from '../../media/loadings/loadingBtn.svg'\r\nimport st from './Preloader.module.scss'\r\n\r\nexport const Preloader = () => {\r\n    return (\r\n        <div className={st.PreloaderContainer}>\r\n            <img alt={'preloader'} src={loadingProgress} />\r\n        </div>\r\n    )\r\n}","import s from \"./MainActionButton.module.scss\";\r\nimport {Preloader} from \"../Preloader/Preloader\";\r\nimport React from \"react\";\r\n\r\ntype MainActionButton = {\r\n    actionClick: () => void\r\n    loadingStatus: boolean\r\n    disabledBtnSubmit: boolean\r\n    title: string\r\n}\r\n\r\nexport const MainActionButton = (props: MainActionButton) => {\r\n    return (\r\n        <button className={s.blueBtn} onClick={props.actionClick}\r\n                disabled={props.loadingStatus || props.disabledBtnSubmit}>{props.loadingStatus ? <Preloader/> : props.title}</button>\r\n    )\r\n}","export const PasswordValidation = (value: string) => {\r\n    return /[0-9a-zA-Z!@#$%^&*]{8,}/.test(value)\r\n}","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport s from './Login.module.scss'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setServerErrorMessageLogin, loginUserTC, logIn} from \"./login-reducer\";\r\nimport {AppStateType} from \"../../state/redux-store\";\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {InputContainer} from \"../../common/InputContainer/InputContainer\";\r\nimport {emailValidation} from \"../../common/validation/EmailValidation\";\r\nimport {HeaderEnterApp} from \"../../common/HeaderEnterApp/HeaderEnterApp\";\r\nimport {MainActionButton} from \"../../common/MainActionButton/MainActionButton\";\r\nimport {PasswordValidation} from \"../../common/validation/passwordValidation\";\r\n\r\nexport const Login = () => {\r\n    const [emailValue, setEmailValue] = useState<string>('')\r\n    const [passwordValue, setPasswordValue] = useState<string>('')\r\n\r\n    const dispatch = useDispatch()\r\n    const loadingStatus = useSelector<AppStateType, boolean>(state => state.login.loadingRequest)\r\n    const isLogIn = useSelector<AppStateType, boolean>(state => state.login.logIn)\r\n    const serverErrorMessage = useSelector<AppStateType, string>(state => state.login.error)\r\n\r\n    const [errorEmailMessage, setErrorEmailMessage] = useState<string>('')\r\n    const [errorPasswordMessage, setErrorPasswordMessage] = useState<string>('')\r\n\r\n    const changeEmailValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setEmailValue(e.currentTarget.value)\r\n        setErrorEmailMessage('')\r\n        serverErrorMessage && dispatch(setServerErrorMessageLogin(''))\r\n    }\r\n    const changePasswordValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setPasswordValue(e.currentTarget.value)\r\n        serverErrorMessage && dispatch(setServerErrorMessageLogin(''))\r\n        setErrorPasswordMessage('')\r\n    }\r\n\r\n    const checkLoginUser = () => {\r\n        if (!emailValidation(emailValue)) {\r\n            setErrorEmailMessage('Incorrect email')\r\n        } else if (!PasswordValidation(passwordValue)) {\r\n            setErrorPasswordMessage('Minimum 8 characters')\r\n        } else {\r\n            dispatch(loginUserTC(emailValue, passwordValue))\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            dispatch(setServerErrorMessageLogin(''))\r\n            dispatch(logIn(false))\r\n            //может потом вылогинить, если будет проверка на logIn\r\n        }\r\n    }, [])\r\n\r\n    if (isLogIn) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n    const disabledBtnSubmit = !emailValue || !passwordValue\r\n\r\n    return (\r\n        <div className={s.authPageContainer}>\r\n            <HeaderEnterApp title={'Sign In'}/>\r\n\r\n            <div className={s.emailPasswordLoginContainer}>\r\n                <InputContainer\r\n                    title={'Email'}\r\n                    typeInput={'email'}\r\n                    value={emailValue}\r\n                    changeValue={changeEmailValue}\r\n                    errorMessage={errorEmailMessage}\r\n                />\r\n                <InputContainer\r\n                    title={'Password'}\r\n                    typeInput={'password'}\r\n                    value={passwordValue}\r\n                    changeValue={changePasswordValue}\r\n                    errorMessage={errorPasswordMessage}\r\n                />\r\n\r\n                <div className={s.forgotPasswordBtn}>\r\n                    <NavLink to=\"/password-recovery\">Forgot Password</NavLink>\r\n                </div>\r\n            </div>\r\n\r\n            <div className={s.btnFooterLoginContainer}>\r\n                <span className={s.errorMessageContainer}>{serverErrorMessage}</span>\r\n                <div className={s.blueBtnContainer}>\r\n                    <MainActionButton actionClick={checkLoginUser}\r\n                                disabledBtnSubmit={disabledBtnSubmit}\r\n                                loadingStatus={loadingStatus}\r\n                                title={'login'}\r\n                    />\r\n                </div>\r\n                <p className={s.DifferentAccountBtn}>Don't have an account</p>\r\n                <NavLink to=\"/registration\" className={s.footerBtn}>Sing Up</NavLink>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\n\r\nexport const Profile = () => {\r\n    return (\r\n        <div>Profile</div>\r\n    )\r\n}","import React from \"react\";\r\nimport styles from './Error404.module.scss'\r\n\r\nexport const Error404 = () => {\r\n    return (\r\n        <div className={styles.pageNotFound}>404</div>\r\n    )\r\n}","import {AppThunkType} from \"../../state/redux-store\";\r\nimport {SetNewPasswordAPI} from \"../../api/api\";\r\n\r\nconst initialStateSetNewPassword = {\r\n    error: '',\r\n    loadingRequest: false,\r\n    success: false,\r\n}\r\n\r\nexport const setNewPasswordReducer = (state: initialSetNewPasswordType = initialStateSetNewPassword, action: actionsSetNewPasswordType): initialSetNewPasswordType => {\r\n    switch (action.type) {\r\n        case 'SET-NEW-PASSWORD/SET-ERROR':\r\n            return {...state, ...action.payload}\r\n        case 'SET-NEW-PASSWORD/SET-LOADING':\r\n            return {...state, ...action.payload}\r\n        case 'SET-NEW-PASSWORD/SET-SUCCESS':\r\n            return {...state, ...action.payload}\r\n        default: return state\r\n    }\r\n}\r\n\r\n//AC\r\nexport const setServerErrorMessage = (error: string) => ({type: 'SET-NEW-PASSWORD/SET-ERROR', payload: {error}} as const)\r\nconst setLoading = (loadingRequest: boolean) => ({type: 'SET-NEW-PASSWORD/SET-LOADING', payload: {loadingRequest}} as const)\r\nconst setSuccess = (success: boolean) => ({type: 'SET-NEW-PASSWORD/SET-SUCCESS', payload: {success}} as const)\r\n\r\n//TC\r\nexport const setNewPasswordThunk = (password: string, token: string): AppThunkType => async (dispatch) => {\r\n    dispatch(setLoading(true))\r\n\r\n    try {\r\n        const response = await SetNewPasswordAPI.setNewPassword(password, token)\r\n        dispatch(setSuccess(true))\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        dispatch(setServerErrorMessage(error))\r\n\r\n        dispatch(setSuccess(false))\r\n    } finally {\r\n        dispatch(setLoading(false))\r\n    }\r\n}\r\n\r\n//types\r\nexport type initialSetNewPasswordType = typeof initialStateSetNewPassword\r\nexport type actionsSetNewPasswordType = ReturnType<typeof setServerErrorMessage>\r\n    | ReturnType<typeof setLoading>\r\n    | ReturnType<typeof setSuccess>","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport s from './Enter-new-password.module.scss'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Redirect, useParams} from \"react-router-dom\";\r\nimport {setServerErrorMessage, setNewPasswordThunk} from \"./enter-new-password-reducer\";\r\nimport {HeaderEnterApp} from \"../../common/HeaderEnterApp/HeaderEnterApp\";\r\nimport {InputContainer} from \"../../common/InputContainer/InputContainer\";\r\nimport {PasswordValidation} from \"../../common/validation/passwordValidation\";\r\nimport {MainActionButton} from \"../../common/MainActionButton/MainActionButton\";\r\nimport {AppStateType} from \"../../state/redux-store\";\r\n\r\nexport const EnterNewPassword = () => {\r\n    const [password, setPassword] = useState<string>('')\r\n    const [error, setError] = useState<string>('')\r\n    const { token } = useParams<{token: string}>()\r\n\r\n    const dispatch = useDispatch()\r\n    const loadingStatus = useSelector<AppStateType, boolean>(state => state.newPassword.loadingRequest)\r\n    const successResponse = useSelector<AppStateType, boolean>(state => state.newPassword.success)\r\n    const serverErrorMessage = useSelector<AppStateType, string>(state => state.newPassword.error)\r\n\r\n    const setNewPassword = () => {\r\n        if (!PasswordValidation(password)) {\r\n            setError('Minimum 8 characters')\r\n        } else {\r\n            dispatch(setNewPasswordThunk(password, token))\r\n        }\r\n    }\r\n\r\n    const inputPassword = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword(event.currentTarget.value)\r\n        setError('')\r\n        serverErrorMessage && dispatch(setServerErrorMessage(''))\r\n    }\r\n\r\n    if (successResponse) {\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.containerNewPassword}>\r\n            <HeaderEnterApp title={'Create new password'}/>\r\n\r\n            <InputContainer\r\n                title={'Password'}\r\n                value={password}\r\n                changeValue={inputPassword}\r\n                errorMessage={error}\r\n                typeInput={'password'}\r\n            />\r\n\r\n            <p className={s.textAction}>Create new password and we will send you further instructions to email</p>\r\n            <div className={s.positionActionBtn}>\r\n                <span className={s.errorMessageContainer}>{serverErrorMessage}</span>\r\n                <div className={s.blueBtnContainer}>\r\n                    <MainActionButton\r\n                        loadingStatus={loadingStatus}\r\n                        actionClick={setNewPassword}\r\n                        disabledBtnSubmit={!password}\r\n                        title={'Create new password'} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import {AppThunkType} from \"../../state/redux-store\";\r\nimport {PasswordRecoveryAPI} from \"../../api/api\";\r\n\r\nconst initialStatePasswordRecovery = {\r\n    error: '',\r\n    loadingRequest: false,\r\n    success: false,\r\n}\r\n\r\nexport const passwordRecoveryReducer = (state: initialPasswordRecoveryType = initialStatePasswordRecovery, action: actionsPasswordRecoveryType): initialPasswordRecoveryType => {\r\n    switch (action.type) {\r\n        case 'PASSWORD-RECOVERY/SET-ERROR':\r\n            return {...state, ...action.payload}\r\n        case 'PASSWORD-RECOVERY/SET-LOADING':\r\n            return {...state, ...action.payload}\r\n        case 'PASSWORD-RECOVERY/SET-SUCCESS':\r\n            return {...state, ...action.payload}\r\n        default: return state\r\n    }\r\n}\r\n\r\n//actionC\r\nconst setLoadingRequest = (loadingRequest: boolean) => ({\r\n    type: 'PASSWORD-RECOVERY/SET-LOADING',\r\n    payload: {loadingRequest}\r\n} as const)\r\nexport const setSuccess = (success: boolean) => ({\r\n    type: 'PASSWORD-RECOVERY/SET-SUCCESS',\r\n    payload: {success}\r\n} as const)\r\nexport const setServerErrorMessageRecovery = (error: string) => {\r\n    return {\r\n        type: 'PASSWORD-RECOVERY/SET-ERROR',\r\n        payload: {error}\r\n    } as const\r\n}\r\n\r\n//thunkC\r\nexport const passwordRecoveryThunk = (email: string): AppThunkType => async (dispatch) => {\r\n    dispatch(setLoadingRequest(true))\r\n\r\n    try {\r\n        const response = await PasswordRecoveryAPI.forgot(email)\r\n        dispatch(setSuccess(true))\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        dispatch(setServerErrorMessageRecovery(error))\r\n\r\n        dispatch(setSuccess(false))\r\n    } finally {\r\n        dispatch(setLoadingRequest(false))\r\n    }\r\n}\r\n\r\n//types\r\nexport type initialPasswordRecoveryType = typeof initialStatePasswordRecovery\r\nexport type actionsPasswordRecoveryType =\r\n    | ReturnType<typeof setLoadingRequest>\r\n    | ReturnType<typeof setSuccess>\r\n    | ReturnType<typeof setServerErrorMessageRecovery>","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport st from './Password-recovery.module.scss'\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {passwordRecoveryThunk, setServerErrorMessageRecovery, setSuccess} from \"./password-recovery-reducer\";\r\n\r\nimport s from \"../Login/Login.module.scss\";\r\nimport {InputContainer} from \"../../common/InputContainer/InputContainer\";\r\nimport {emailValidation} from \"../../common/validation/EmailValidation\";\r\nimport {HeaderEnterApp} from \"../../common/HeaderEnterApp/HeaderEnterApp\";\r\nimport {MainActionButton} from \"../../common/MainActionButton/MainActionButton\";\r\nimport {AppStateType} from \"../../state/redux-store\";\r\n\r\nexport const PasswordRecovery = () => {\r\n    const [email, setEmail] = useState<string>('hardtruenew39@gmail.com')\r\n    const [error, setError] = useState<string>('')\r\n    const disabledBtnSubmit = !email\r\n\r\n    const dispatch = useDispatch()\r\n    const loadingStatus = useSelector<AppStateType, boolean>(state => state.PasswordRecovery.loadingRequest)\r\n    const success = useSelector<AppStateType, boolean>(state => state.PasswordRecovery.success)\r\n    const serverErrorMessage = useSelector<AppStateType, string>(state => state.PasswordRecovery.error)\r\n\r\n    const sendLetter = () => {\r\n        !emailValidation(email) ?\r\n            setError('Incorrect email')\r\n            :\r\n            dispatch(passwordRecoveryThunk(email))\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            dispatch(setSuccess(false))\r\n            dispatch(setServerErrorMessageRecovery(''))\r\n        }\r\n    }, [])\r\n\r\n    const inputEmail = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setError('')\r\n        setEmail(event.currentTarget.value)\r\n        serverErrorMessage && dispatch(setServerErrorMessageRecovery(''))\r\n        if (emailValidation(event.currentTarget.value)) {\r\n            setError('')\r\n        }\r\n    }\r\n\r\n    if (success) {\r\n        return <Redirect to={`/password-recovery-check-email/${email}`}/>\r\n    }\r\n\r\n    return (\r\n        <div className={st.forgotPasswordContainer}>\r\n            <HeaderEnterApp title={'Forgot your password?'}/>\r\n            <InputContainer\r\n                placeholder={'Email'}\r\n                changeValue={inputEmail}\r\n                errorMessage={error}\r\n                typeInput={'email'}\r\n                value={email}\r\n            />\r\n            <p className={st.textAction}>Enter your email address and we will send you further instructions</p>\r\n\r\n            <div className={s.btnFooterLoginContainer}>\r\n                <span className={s.errorMessageContainer}>{serverErrorMessage}</span>\r\n                <div className={s.blueBtnContainer}>\r\n                    <MainActionButton\r\n                        title={'Send Instructions'}\r\n                        actionClick={sendLetter}\r\n                        disabledBtnSubmit={disabledBtnSubmit}\r\n                        loadingStatus={loadingStatus}\r\n                    />\r\n                </div>\r\n                <p className={s.DifferentAccountBtn}>Did you remember your password?</p>\r\n                <NavLink to=\"/login\" className={s.footerBtn}>Try logging in</NavLink>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {Dispatch} from \"redux\";\r\nimport {AppThunkType} from \"../../state/redux-store\";\r\nimport {registrationAPI} from \"../../api/api\";\r\n\r\nconst initialStateRegistration = {\r\n    isRegistration: false,\r\n    loadingRequest: false,\r\n    error: ''\r\n}\r\n\r\nexport const registrationReducer = (state: initialRegistrationType = initialStateRegistration, action: actionsRegistrationType): initialRegistrationType => {\r\n    switch (action.type) {\r\n        case 'REGISTRATION/SET-REGISTRATION':\r\n            return {...state, ...action.payload}\r\n        case 'REGISTRATION/LOADING-REQUEST':\r\n            return {...state, ...action.payload}\r\n        case 'LOGIN/INCORRECT-DATA-LOG-IN':\r\n            return {...state, ...action.payload}\r\n        default: return state\r\n    }\r\n}\r\n\r\n//actionC\r\nexport const setRegistrationAC = (isRegistration: boolean) => ({\r\n    type: 'REGISTRATION/SET-REGISTRATION', payload: {isRegistration}\r\n} as const)\r\nconst loadingRequest = (loadingRequest: boolean) => ({\r\n    type: 'REGISTRATION/LOADING-REQUEST',\r\n    payload: {loadingRequest}\r\n} as const)\r\nexport const setServerErrorMessageRegistration = (error: string) => {\r\n    return {\r\n        type: 'LOGIN/INCORRECT-DATA-LOG-IN',\r\n        payload: {error}\r\n    } as const\r\n}\r\n\r\n//thunkC\r\nexport const setRegistration = (email: string, password: string): AppThunkType => async (dispatch: Dispatch<actionsRegistrationType>) => {\r\n    dispatch(loadingRequest(true))\r\n\r\n    try {\r\n        const response = await registrationAPI.register(email, password)\r\n        dispatch(setRegistrationAC(true))\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        dispatch(setServerErrorMessageRegistration(error))\r\n    } finally {\r\n        dispatch(loadingRequest(false))\r\n    }\r\n}\r\n\r\n//types\r\nexport type initialRegistrationType = typeof initialStateRegistration\r\nexport type actionsRegistrationType = ReturnType<typeof setRegistrationAC>\r\n    | ReturnType<typeof loadingRequest>\r\n    | ReturnType<typeof setServerErrorMessageRegistration>","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport s from './Registration.module.scss'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../state/redux-store\";\r\nimport {setRegistration, setRegistrationAC, setServerErrorMessageRegistration} from \"./registration-reducer\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {InputContainer} from \"../../common/InputContainer/InputContainer\";\r\nimport {emailValidation} from \"../../common/validation/EmailValidation\";\r\nimport {PasswordValidation} from \"../../common/validation/passwordValidation\";\r\nimport {HeaderEnterApp} from \"../../common/HeaderEnterApp/HeaderEnterApp\";\r\nimport {MainActionButton} from \"../../common/MainActionButton/MainActionButton\";\r\n\r\nexport const Registration = () => {\r\n    const [email, setEmail] = useState<string>('')\r\n    const [password, setPassword] = useState<string>('')\r\n    const [checkPassword, setCheckPassword] = useState<string>('')\r\n\r\n    const [errorEmailMessage, setErrorEmailMessage] = useState<string>('')\r\n    const [errorPasswordMessage, setErrorPasswordMessage] = useState<string>('')\r\n\r\n    const disabledBtnSubmit = !email || !password || !checkPassword\r\n\r\n    const dispatch = useDispatch()\r\n    const loadingStatus = useSelector<AppStateType, boolean>(state => state.registration.loadingRequest)\r\n    const isRegistration = useSelector<AppStateType, boolean>(state => state.registration.isRegistration)\r\n    const serverErrorMessage = useSelector<AppStateType, string>(state => state.registration.error)\r\n\r\n    const onChangeEmail = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setErrorEmailMessage('')\r\n        setEmail(e.currentTarget.value)\r\n        serverErrorMessage && dispatch(setServerErrorMessageRegistration(''))\r\n    }\r\n\r\n    const onChangePassword = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setErrorPasswordMessage('')\r\n        setPassword(e.currentTarget.value)\r\n        serverErrorMessage && dispatch(setServerErrorMessageRegistration(''))\r\n    }\r\n\r\n    const onChangeCheckPassword = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setErrorPasswordMessage('')\r\n        setCheckPassword(e.currentTarget.value)\r\n        serverErrorMessage && dispatch(setServerErrorMessageRegistration(''))\r\n    }\r\n\r\n    const onRegistration = () => {\r\n        if (!emailValidation(email)) {\r\n            setErrorEmailMessage('Incorrect email')\r\n        } else if (!PasswordValidation(password)) {\r\n            setErrorPasswordMessage('Minimum 8 characters')\r\n        } else if (password !== checkPassword) {\r\n            setErrorPasswordMessage('Enter the same password')\r\n        } else {\r\n            dispatch(setRegistration(email, password))\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            dispatch(setServerErrorMessageRegistration(''))\r\n            dispatch(setRegistrationAC(false))\r\n        }\r\n    }, [])\r\n\r\n    if (isRegistration) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    const goBack = () => {\r\n        window.history.go(-1);\r\n    }\r\n\r\n    return (\r\n        <div className={s.registrationContainer}>\r\n            <HeaderEnterApp title={'Sign Up'}/>\r\n            <div className={s.inputFields}>\r\n                <InputContainer\r\n                    title={'Email'}\r\n                    typeInput={'email'}\r\n                    value={email}\r\n                    changeValue={onChangeEmail}\r\n                    errorMessage={errorEmailMessage}\r\n                />\r\n                <InputContainer\r\n                    title={'password'}\r\n                    typeInput={'password'}\r\n                    value={password}\r\n                    changeValue={onChangePassword}\r\n                    errorMessage={errorPasswordMessage}\r\n                />\r\n                <InputContainer\r\n                    title={'Confirm password'}\r\n                    typeInput={'password'}\r\n                    value={checkPassword}\r\n                    changeValue={onChangeCheckPassword}\r\n                    errorMessage={errorPasswordMessage}\r\n                />\r\n            </div>\r\n\r\n            <div className={s.positionBtnsAndError}>\r\n                <span className={s.errorMessageContainer}>{serverErrorMessage}</span>\r\n\r\n                <div className={s.btns}>\r\n                    <a className={s.btnCancel} onClick={goBack}>Cancel</a>\r\n                    <div className={s.blueBtnContainer}>\r\n                        <MainActionButton\r\n                            actionClick={onRegistration}\r\n                            disabledBtnSubmit={disabledBtnSubmit}\r\n                            title={'Register'}\r\n                            loadingStatus={loadingStatus}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from './Navbar.module.scss';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport const Navbar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to=\"/login\" activeClassName={s.activeLink}>login</NavLink>\r\n            </div>\r\n            {/*<div className={s.item}>*/}\r\n            {/*    <NavLink to=\"/new-password\" activeClassName={s.activeLink}>new password</NavLink>*/}\r\n            {/*</div>*/}\r\n            <div className={s.item}>\r\n                <NavLink to=\"/password-recovery\" activeClassName={s.activeLink}>password recovery</NavLink>\r\n            </div>\r\n            {/*<div className={s.item}>*/}\r\n            {/*    <NavLink to=\"/password-recovery-check-email\" activeClassName={s.activeLink}>check email</NavLink>*/}\r\n            {/*</div>*/}\r\n            <div className={s.item}>\r\n                <NavLink to=\"/registration\" activeClassName={s.activeLink}>registration</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/test-components\" activeClassName={s.activeLink}>test components</NavLink>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/checkEmail.27258fd7.svg\";","import React from \"react\";\r\nimport s from './Password-recovery.module.scss'\r\nimport checkEmail from '../../media/password/checkEmail.svg'\r\nimport {useParams} from \"react-router-dom\";\r\n\r\nexport const CheckEmail = () => {\r\n    const {email} = useParams<{ email: string }>()\r\n\r\n    return (\r\n        <div className={s.containerCheckEmail}>\r\n            <p className={s.headerCheckEmail}>It-incubator</p>\r\n            <div className={s.imageCheckEmail}>\r\n                <img src={checkEmail} alt={'Check email'}/>\r\n            </div>\r\n            <p className={s.titleCheckEmail}>Check Email</p>\r\n            <p className={s.textActionCheckEmail}>We’ve sent an Email with instructions to {email}</p>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {TestComponents} from \"./components/TestComponents/Test-components\";\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport {Login} from \"./components/Login/Login\";\r\nimport {Profile} from \"./components/Profile/Profile\";\r\nimport {Error404} from \"./components/Error404/Error404\";\r\nimport {EnterNewPassword} from \"./components/EnterNewPassword/Enter-new-password\";\r\nimport {PasswordRecovery} from \"./components/PasswordRecovery/Password-recovery\";\r\nimport {Registration} from \"./components/Registration/Registration\";\r\nimport {Navbar} from \"./components/Navbar/Navbar\";\r\nimport {CheckEmail} from \"./components/PasswordRecovery/ChekEmail\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <Navbar />\r\n            <main className={'mainContainer'}>\r\n                <Switch>\r\n                    <Route path={'/learning-cards/'} render={() => <div>Hi!</div>}/>\r\n                    <Route exact path={'/login'} render={() => <Login/>}/>\r\n                    <Route exact path={'/profile'} render={() => <Profile/>}/>\r\n                    <Route path={'/new-password/:token'} render={() => <EnterNewPassword/>}/>\r\n                    <Route exact path={'/password-recovery'} render={() => <PasswordRecovery/>}/>\r\n                    <Route path={'/password-recovery-check-email/:email'} render={() => <CheckEmail/>}/>\r\n                    <Route exact path={'/registration'} render={() => <Registration/>}/>\r\n                    <Route exact path={'/test-components'} render={() => <TestComponents/>}/>\r\n                    <Route path={'*'} render={() => <Error404/>}/>\r\n                </Switch>\r\n            </main>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","const initialStateProfile = {\r\n\r\n}\r\n\r\nexport const profileReducer = (state: initialProfileType = initialStateProfile, action: actionsProfileType) => {\r\n    switch (action.type) {\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n//types\r\nexport type initialProfileType = {\r\n\r\n}\r\nexport type actionsProfileType = any","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport thunk, {ThunkAction} from 'redux-thunk';\r\nimport {actionsLoginType, loginReducer} from \"../components/Login/login-reducer\";\r\nimport {\r\n    actionsPasswordRecoveryType,\r\n    passwordRecoveryReducer\r\n} from \"../components/PasswordRecovery/password-recovery-reducer\";\r\nimport {\r\n    actionsSetNewPasswordType,\r\n    setNewPasswordReducer\r\n} from \"../components/EnterNewPassword/enter-new-password-reducer\";\r\nimport {actionsProfileType, profileReducer} from \"../components/Profile/profile-reducer\";\r\nimport {actionsRegistrationType, registrationReducer} from \"../components/Registration/registration-reducer\";\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n    login: loginReducer,\r\n    PasswordRecovery: passwordRecoveryReducer,\r\n    newPassword: setNewPasswordReducer,\r\n    profile: profileReducer,\r\n    registration: registrationReducer,\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\ntype AppActionsType = actionsSetNewPasswordType\r\n    | actionsLoginType\r\n    | actionsPasswordRecoveryType\r\n    | actionsProfileType\r\n    | actionsRegistrationType\r\n\r\nexport type AppThunkType<ReturnType = void> = ThunkAction<ReturnType,\r\n    AppStateType,\r\n    unknown,\r\n    AppActionsType>\r\n\r\ndeclare global {\r\n    interface Window {\r\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose\r\n    }\r\n}\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)))","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/redux-store\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </HashRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"authPageContainer\":\"Login_authPageContainer__1gL9t\",\"emailPasswordLoginContainer\":\"Login_emailPasswordLoginContainer__3tbR2\",\"forgotPasswordBtn\":\"Login_forgotPasswordBtn__p032w\",\"btnFooterLoginContainer\":\"Login_btnFooterLoginContainer__2xscl\",\"errorMessageContainer\":\"Login_errorMessageContainer__F9y7_\",\"DifferentAccountBtn\":\"Login_DifferentAccountBtn__3bED5\",\"footerBtn\":\"Login_footerBtn__3QdxJ\",\"blueBtnContainer\":\"Login_blueBtnContainer__2VBsl\"};"],"sourceRoot":""}